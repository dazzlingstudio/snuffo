/*
Deployment script for [YOUR DATABASE NAME]

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "[YOUR DATABASE NAME]"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.'+ CHAR(13) +'See: https://www.sqlshack.com/use-sqlcmd-commands-ssms-query-editor/';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
-- Enable the snapshot transaction isolation level
ALTER DATABASE [$(DatabaseName)]
	SET ALLOW_SNAPSHOT_ISOLATION ON
GO
/*
 Pre-Deployment Script Template              
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.  
 Use SQLCMD syntax to include a file in the pre-deployment script.      
 Example:      :r .\myfile.sql                
 Use SQLCMD syntax to reference a variable in the pre-deployment script.    
 Example:      :setvar TableName MyTable              
               SELECT * FROM [$(TableName)]          
--------------------------------------------------------------------------------------
*/


GO

GO
PRINT N'Creating [Uvendia]...';


GO
CREATE SCHEMA [Uvendia]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Uvendia].[ProductToTranslation]...';


GO
CREATE TABLE [Uvendia].[ProductToTranslation] (
    [ProductId]     BIGINT NOT NULL,
    [TranslationId] BIGINT NOT NULL,
    CONSTRAINT [PK_ProductToTranslation] PRIMARY KEY CLUSTERED ([ProductId] ASC, [TranslationId] ASC)
);


GO
PRINT N'Creating [Uvendia].[CategoryToTranslation]...';


GO
CREATE TABLE [Uvendia].[CategoryToTranslation] (
    [CategoryId]    BIGINT NOT NULL,
    [TranslationId] BIGINT NOT NULL,
    CONSTRAINT [PK_CatgoryToTranslation] PRIMARY KEY CLUSTERED ([CategoryId] ASC, [TranslationId] ASC)
);


GO
PRINT N'Creating [Uvendia].[Definition]...';


GO
CREATE TABLE [Uvendia].[Definition] (
    [Id]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]       VARCHAR (255)  NOT NULL,
    [Type]       VARCHAR (25)   NOT NULL,
    [InheritId]  BIGINT         NULL,
    [ModifiedOn] DATETIME       NULL,
    [ModifiedBy] NVARCHAR (512) NULL,
    [CreatedOn]  DATETIME       NOT NULL,
    [CreatedBy]  NVARCHAR (512) NULL,
    [Rowversion] ROWVERSION     NOT NULL,
    CONSTRAINT [PK_DefinitionId] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [uidx_definition_name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Uvendia].[Translation]...';


GO
CREATE TABLE [Uvendia].[Translation] (
    [Id]               BIGINT         IDENTITY (1, 1) NOT NULL,
    [CultureName]      VARCHAR (50)   NOT NULL,
    [NativeName]       VARCHAR (255)  NOT NULL,
    [DisplayName]      NVARCHAR (MAX) NULL,
    [ShortDescription] NVARCHAR (MAX) NULL,
    [LongDescription]  NVARCHAR (MAX) NULL,
    [ModifiedOn]       DATETIME       NULL,
    [ModifiedBy]       NVARCHAR (512) NULL,
    [CreatedOn]        DATETIME       NOT NULL,
    [CreatedBy]        NVARCHAR (512) NULL,
    CONSTRAINT [PK_Translation] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Translation].[IX_Tanslation_CultureName]...';


GO
CREATE NONCLUSTERED INDEX [IX_Tanslation_CultureName]
    ON [Uvendia].[Translation]([CultureName] ASC);


GO
PRINT N'Creating [Uvendia].[Cart]...';


GO
CREATE TABLE [Uvendia].[Cart] (
    [Id]                        UNIQUEIDENTIFIER NOT NULL,
    [CookieId]                  UNIQUEIDENTIFIER NULL,
    [ProductId]                 BIGINT           NULL,
    [TicketSaleId]              BIGINT           NULL,
    [TicketCancellationInsured] BIT              NOT NULL,
    [Name]                      NVARCHAR (500)   NULL,
    [Description]               NVARCHAR (MAX)   NULL,
    [Quantity]                  INT              NOT NULL,
    [UnitPrice]                 MONEY            NOT NULL,
    [UnitPriceId]               BIGINT           NOT NULL,
    [PriceDefinitionName]       VARCHAR (255)    NOT NULL,
    [ItemDiscount]              DECIMAL (18, 5)  NOT NULL,
    [IsActive]                  BIT              NOT NULL,
    [MetaData]                  NVARCHAR (MAX)   NULL,
    [ModifiedOn]                DATETIME         NULL,
    [ModifiedBy]                NVARCHAR (512)   NULL,
    [CreatedOn]                 DATETIME         NOT NULL,
    [CreatedBy]                 NVARCHAR (512)   NULL,
    CONSTRAINT [PK_Cart] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Cart].[IX_Cart_CookieId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Cart_CookieId]
    ON [Uvendia].[Cart]([CookieId] ASC);


GO
PRINT N'Creating [Uvendia].[TicketOrderDetail]...';


GO
CREATE TABLE [Uvendia].[TicketOrderDetail] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [OrderId]             BIGINT           NOT NULL,
    [TicketSaleId]        BIGINT           NOT NULL,
    [SalePrice]           DECIMAL (18, 5)  NOT NULL,
    [Quantity]            INT              NOT NULL,
    [Discount]            DECIMAL (18, 5)  NULL,
    [MetaData]            NVARCHAR (MAX)   NULL,
    [CancellationInsured] BIT              NOT NULL,
    CONSTRAINT [PK_TicketOrderDetail] PRIMARY KEY CLUSTERED ([Id] ASC, [OrderId] ASC)
);


GO
PRINT N'Creating [Uvendia].[TicketOrderDetail].[IX_TicketOrderDetail_OrderId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketOrderDetail_OrderId]
    ON [Uvendia].[TicketOrderDetail]([OrderId] ASC);


GO
PRINT N'Creating [Uvendia].[TicketOrderDetail].[IX_TicketOrderDetail_TicketSaleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketOrderDetail_TicketSaleId]
    ON [Uvendia].[TicketOrderDetail]([TicketSaleId] ASC);


GO
PRINT N'Creating [Uvendia].[TicketSale]...';


GO
CREATE TABLE [Uvendia].[TicketSale] (
    [Id]                  BIGINT         IDENTITY (1, 1) NOT NULL,
    [EventId]             BIGINT         NOT NULL,
    [TicketTypeId]        BIGINT         NOT NULL,
    [QuantityAvailable]   INT            NULL,
    [TicketPriceId]       BIGINT         NOT NULL,
    [Description]         NVARCHAR (500) NULL,
    [AvailabilityEndDate] DATETIME       NULL,
    [Enabled]             BIT            NOT NULL,
    [ModifiedOn]          DATETIME       NULL,
    [ModifiedBy]          NVARCHAR (512) NULL,
    [CreatedOn]           DATETIME       NOT NULL,
    [CreatedBy]           NVARCHAR (512) NULL,
    CONSTRAINT [PK_TicketSale] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[TicketSale].[IX_TicketSale_EventId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketSale_EventId]
    ON [Uvendia].[TicketSale]([EventId] ASC);


GO
PRINT N'Creating [Uvendia].[TicketSale].[IX_TicketSale_TicketTypeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TicketSale_TicketTypeId]
    ON [Uvendia].[TicketSale]([TicketTypeId] ASC);


GO
PRINT N'Creating [Uvendia].[ProductToCategory]...';


GO
CREATE TABLE [Uvendia].[ProductToCategory] (
    [ProductId]  BIGINT NOT NULL,
    [CategoryId] BIGINT NOT NULL,
    CONSTRAINT [PK_ProductToCategory] PRIMARY KEY CLUSTERED ([ProductId] ASC, [CategoryId] ASC)
);


GO
PRINT N'Creating [Uvendia].[Category]...';


GO
CREATE TABLE [Uvendia].[Category] (
    [Id]               BIGINT         IDENTITY (1, 1) NOT NULL,
    [ExternalId]       VARCHAR (255)  NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [ParentCategoryId] BIGINT         NULL,
    [StoreId]          BIGINT         NOT NULL,
    [OrderNr]          SMALLINT       NOT NULL,
    [DefinitionId]     BIGINT         NULL,
    [Published]        BIT            NOT NULL,
    [ModifiedOn]       DATETIME       NULL,
    [ModifiedBy]       NVARCHAR (512) NULL,
    [CreatedOn]        DATETIME       NOT NULL,
    [CreatedBy]        NVARCHAR (512) NULL,
    [Rowversion]       ROWVERSION     NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [uidx_category_name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Uvendia].[Category].[IX_Category_StoreId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Category_StoreId]
    ON [Uvendia].[Category]([StoreId] ASC);


GO
PRINT N'Creating [Uvendia].[Category].[IX_Category_ExternalId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Category_ExternalId]
    ON [Uvendia].[Category]([ExternalId] ASC);


GO
PRINT N'Creating [Uvendia].[Property]...';


GO
CREATE TABLE [Uvendia].[Property] (
    [Id]                         BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]                       VARCHAR (255)  NULL,
    [Description]                NVARCHAR (MAX) NULL,
    [DefinitionId]               BIGINT         NOT NULL,
    [DataTypeId]                 INT            NOT NULL,
    [Tags]                       NVARCHAR (MAX) NULL,
    [Required]                   BIT            NOT NULL,
    [IsVariant]                  BIT            NOT NULL,
    [ValidationExpression]       VARCHAR (512)  NULL,
    [ValidationAssemblyTypeName] VARCHAR (512)  NULL,
    [ModifiedOn]                 DATETIME       NULL,
    [ModifiedBy]                 NVARCHAR (512) NULL,
    [CreatedOn]                  DATETIME       NOT NULL,
    [CreatedBy]                  NVARCHAR (512) NULL,
    CONSTRAINT [PK_Property] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Property].[IX_Property_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_Property_Name]
    ON [Uvendia].[Property]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[ProductOrderDetail]...';


GO
CREATE TABLE [Uvendia].[ProductOrderDetail] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [OrderId]     BIGINT           NOT NULL,
    [ProductId]   BIGINT           NOT NULL,
    [UnitPriceId] BIGINT           NULL,
    [SalePrice]   DECIMAL (18, 5)  NOT NULL,
    [Quantity]    INT              NOT NULL,
    [Discount]    DECIMAL (18, 5)  NULL,
    [MetaData]    NVARCHAR (MAX)   NULL,
    [Retoured]    BIT              NOT NULL,
    CONSTRAINT [PK_ProductOrderDetail] PRIMARY KEY CLUSTERED ([Id] ASC, [OrderId] ASC)
);


GO
PRINT N'Creating [Uvendia].[ProductOrderDetail].[IX_ProductOrderDetail_OrderId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProductOrderDetail_OrderId]
    ON [Uvendia].[ProductOrderDetail]([OrderId] ASC);


GO
PRINT N'Creating [Uvendia].[ProductOrderDetail].[IX_ProductOrderDetail_ProductId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProductOrderDetail_ProductId]
    ON [Uvendia].[ProductOrderDetail]([ProductId] ASC);


GO
PRINT N'Creating [Uvendia].[Order]...';


GO
CREATE TABLE [Uvendia].[Order] (
    [Id]                   BIGINT           IDENTITY (1, 1) NOT NULL,
    [ExternalId]           VARCHAR (512)    NULL,
    [CookieId]             UNIQUEIDENTIFIER NULL,
    [CustomerId]           NVARCHAR (255)   NULL,
    [CustomerName]         NVARCHAR (512)   NULL,
    [CustomerEmail]        NVARCHAR (512)   NULL,
    [CustomerPhone]        NVARCHAR (50)    NULL,
    [OrderDate]            DATETIME         NOT NULL,
    [ShippedDate]          DATETIME         NULL,
    [InvoiceAddressId]     BIGINT           NULL,
    [ShipAddressId]        BIGINT           NULL,
    [Paid]                 BIT              NOT NULL,
    [PaidAmount]           MONEY            NOT NULL,
    [PaymentMethodId]      BIGINT           NULL,
    [ShippingMethodId]     BIGINT           NULL,
    [PaymentTransactionId] NVARCHAR (500)   NULL,
    [PayerId]              NVARCHAR (500)   NULL,
    [PaymentError]         NVARCHAR (MAX)   NULL,
    [OrderStatusId]        SMALLINT         NOT NULL,
    [OrderNumber]          VARCHAR (50)     NOT NULL,
    [TrackTrace]           VARCHAR (500)    NULL,
    [MetaData]             NVARCHAR (MAX)   NULL,
    [ModifiedOn]           DATETIME         NULL,
    [ModifiedBy]           NVARCHAR (512)   NULL,
    [CreatedOn]            DATETIME         NOT NULL,
    [CreatedBy]            NVARCHAR (512)   NULL,
    CONSTRAINT [PK_Order] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Order].[IX_Order_CookieId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Order_CookieId]
    ON [Uvendia].[Order]([CookieId] ASC);


GO
PRINT N'Creating [Uvendia].[Order].[IX_Order_ExternalId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Order_ExternalId]
    ON [Uvendia].[Order]([ExternalId] ASC);


GO
PRINT N'Creating [Uvendia].[Order].[IX_Order_CustomerId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Order_CustomerId]
    ON [Uvendia].[Order]([CustomerId] ASC);


GO
PRINT N'Creating [Uvendia].[Order].[IX_Order_CreatedBy]...';


GO
CREATE NONCLUSTERED INDEX [IX_Order_CreatedBy]
    ON [Uvendia].[Order]([CreatedBy] ASC);


GO
PRINT N'Creating [Uvendia].[Order].[IX_Order_OrderDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Order_OrderDate]
    ON [Uvendia].[Order]([OrderDate] ASC);


GO
PRINT N'Creating [Uvendia].[Order].[IX_Order_StatusId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Order_StatusId]
    ON [Uvendia].[Order]([OrderStatusId] ASC);


GO
PRINT N'Creating [Uvendia].[Product]...';


GO
CREATE TABLE [Uvendia].[Product] (
    [Id]                 BIGINT          IDENTITY (1, 1) NOT NULL,
    [Sku]                NVARCHAR (255)  NOT NULL,
    [VariantSku]         NVARCHAR (255)  NULL,
    [Name]               NVARCHAR (255)  NOT NULL,
    [OrderNr]            SMALLINT        NOT NULL,
    [HasVariant]         BIT             NOT NULL,
    [Published]          BIT             NOT NULL,
    [IsAvailable]        BIT             NOT NULL,
    [PublishedOn]        DATETIME        NOT NULL,
    [Weight]             FLOAT (53)      NULL,
    [DiscountPercentage] DECIMAL (18, 5) NULL,
    [HasStockIndication] BIT             NOT NULL,
    [Tags]               NVARCHAR (MAX)  NULL,
    [DefinitionId]       BIGINT          NULL,
    [ModifiedOn]         DATETIME        NULL,
    [ModifiedBy]         NVARCHAR (512)  NULL,
    [CreatedOn]          DATETIME        NOT NULL,
    [CreatedBy]          NVARCHAR (512)  NULL,
    [Rowversion]         ROWVERSION      NOT NULL,
    CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_Product_Sku] UNIQUE NONCLUSTERED ([Sku] ASC, [VariantSku] ASC)
);


GO
PRINT N'Creating [Uvendia].[Product].[IX_Product_Sku_VariantSku]...';


GO
CREATE NONCLUSTERED INDEX [IX_Product_Sku_VariantSku]
    ON [Uvendia].[Product]([Sku] ASC, [VariantSku] ASC);


GO
PRINT N'Creating [Uvendia].[Product].[IX_Product_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_Product_Name]
    ON [Uvendia].[Product]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[Review]...';


GO
CREATE TABLE [Uvendia].[Review] (
    [Id]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [ExternalId] VARCHAR (255)  NULL,
    [Name]       NVARCHAR (255) NOT NULL,
    [Email]      NVARCHAR (500) NULL,
    [Location]   NVARCHAR (255) NULL,
    [ItemId]     BIGINT         NOT NULL,
    [Stars]      FLOAT (53)     NULL,
    [Subject]    NVARCHAR (255) NOT NULL,
    [Comment]    NVARCHAR (MAX) NOT NULL,
    [ModifiedOn] DATETIME       NULL,
    [ModifiedBy] NVARCHAR (512) NULL,
    [CreatedOn]  DATETIME       NOT NULL,
    [CreatedBy]  NVARCHAR (512) NULL,
    CONSTRAINT [PK_Review] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Review].[IX_Review_ExternalId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Review_ExternalId]
    ON [Uvendia].[Review]([ExternalId] ASC);


GO
PRINT N'Creating [Uvendia].[Review].[IX_Review_ItemId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Review_ItemId]
    ON [Uvendia].[Review]([ItemId] ASC, [Stars] ASC);


GO
PRINT N'Creating [Uvendia].[Event]...';


GO
CREATE TABLE [Uvendia].[Event] (
    [Id]                       BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]                     NVARCHAR (255) NOT NULL,
    [Organizer]                NVARCHAR (255) NULL,
    [OrderNr]                  SMALLINT       NOT NULL,
    [AddressId]                BIGINT         NULL,
    [StartTime]                DATETIME       NULL,
    [EndTime]                  DATETIME       NULL,
    [DefinitionId]             BIGINT         NULL,
    [Published]                BIT            NULL,
    [EventTypeId]              SMALLINT       NOT NULL,
    [EventStatusId]            SMALLINT       NOT NULL,
    [IsTicketSaleEnabled]      BIT            NULL,
    [TotalTicketsAvailable]    INT            NULL,
    [HasCancellationInsurance] BIT            NOT NULL,
    [ExtraInfoLabel]           NVARCHAR (512) NULL,
    [YoutubeVideoUrl]          NVARCHAR (MAX) NULL,
    [ModifiedOn]               DATETIME       NULL,
    [ModifiedBy]               NVARCHAR (512) NULL,
    [CreatedOn]                DATETIME       NOT NULL,
    [CreatedBy]                NVARCHAR (512) NULL,
    CONSTRAINT [PK_Event] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Event].[IX_Event_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_Event_Name]
    ON [Uvendia].[Event]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[Event].[IX_Event_Time]...';


GO
CREATE NONCLUSTERED INDEX [IX_Event_Time]
    ON [Uvendia].[Event]([StartTime] ASC, [EndTime] ASC);


GO
PRINT N'Creating [Uvendia].[Event].[IX_Event_StatusId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Event_StatusId]
    ON [Uvendia].[Event]([EventStatusId] ASC);


GO
PRINT N'Creating [Uvendia].[Address]...';


GO
CREATE TABLE [Uvendia].[Address] (
    [Id]                   BIGINT         IDENTITY (1, 1) NOT NULL,
    [AddresseeName]        VARCHAR (255)  NULL,
    [FirstName]            NVARCHAR (512) NULL,
    [LastName]             NVARCHAR (512) NULL,
    [BirthDate]            DATETIME       NULL,
    [Email]                NVARCHAR (500) NULL,
    [Phone]                NVARCHAR (50)  NULL,
    [CountryCode]          NVARCHAR (5)   NOT NULL,
    [AddressLine1]         NVARCHAR (500) NOT NULL,
    [AddressLine2]         NVARCHAR (500) NULL,
    [Housenumber]          INT            NULL,
    [HousenumberExtension] NVARCHAR (50)  NULL,
    [Zipcode]              NVARCHAR (50)  NULL,
    [City]                 NVARCHAR (255) NOT NULL,
    [AddressTypeId]        SMALLINT       NOT NULL,
    [ModifiedOn]           DATETIME       NULL,
    [ModifiedBy]           NVARCHAR (512) NULL,
    [CreatedOn]            DATETIME       NOT NULL,
    [CreatedBy]            NVARCHAR (512) NULL,
    [Rowversion]           ROWVERSION     NOT NULL,
    CONSTRAINT [PK_Address] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Address].[IX_Address_CreatedBy]...';


GO
CREATE NONCLUSTERED INDEX [IX_Address_CreatedBy]
    ON [Uvendia].[Address]([CreatedBy] ASC);


GO
PRINT N'Creating [Uvendia].[EventToPrice]...';


GO
CREATE TABLE [Uvendia].[EventToPrice] (
    [EventId] BIGINT NOT NULL,
    [PriceId] BIGINT NOT NULL,
    CONSTRAINT [PK_EventToPrice] PRIMARY KEY CLUSTERED ([EventId] ASC, [PriceId] ASC)
);


GO
PRINT N'Creating [Uvendia].[Subscription]...';


GO
CREATE TABLE [Uvendia].[Subscription] (
    [Id]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [Email]        NVARCHAR (500) NULL,
    [Phone]        NVARCHAR (50)  NULL,
    [AddressLine1] NVARCHAR (500) NULL,
    [AddressLine2] NVARCHAR (500) NULL,
    [Zipcode]      NVARCHAR (50)  NULL,
    [City]         NVARCHAR (255) NULL,
    [Country]      NVARCHAR (255) NULL,
    [IsActive]     BIT            NOT NULL,
    [ModifiedOn]   DATETIME       NULL,
    [ModifiedBy]   NVARCHAR (512) NULL,
    [CreatedOn]    DATETIME       NOT NULL,
    [CreatedBy]    NVARCHAR (512) NULL,
    [Rowversion]   ROWVERSION     NOT NULL
);


GO
PRINT N'Creating [Uvendia].[Subscription].[IX_Subscription_Email]...';


GO
CREATE NONCLUSTERED INDEX [IX_Subscription_Email]
    ON [Uvendia].[Subscription]([Email] ASC, [Phone] ASC);


GO
PRINT N'Creating [Uvendia].[Subscription].[IX_Subscription_Country]...';


GO
CREATE NONCLUSTERED INDEX [IX_Subscription_Country]
    ON [Uvendia].[Subscription]([Country] ASC);


GO
PRINT N'Creating [Uvendia].[Inventory]...';


GO
CREATE TABLE [Uvendia].[Inventory] (
    [Id]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [ProductId]  BIGINT         NOT NULL,
    [Stock]      INT            NOT NULL,
    [ModifiedOn] DATETIME       NULL,
    [ModifiedBy] NVARCHAR (512) NULL,
    [CreatedOn]  DATETIME       NOT NULL,
    [CreatedBy]  NVARCHAR (512) NULL,
    [Rowversion] ROWVERSION     NOT NULL,
    CONSTRAINT [PK_Inventory] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[EventToTranslation]...';


GO
CREATE TABLE [Uvendia].[EventToTranslation] (
    [EventId]       BIGINT NOT NULL,
    [TranslationId] BIGINT NOT NULL,
    CONSTRAINT [PK_EventToTranslation] PRIMARY KEY CLUSTERED ([EventId] ASC, [TranslationId] ASC)
);


GO
PRINT N'Creating [Uvendia].[SerializedSettings]...';


GO
CREATE TABLE [Uvendia].[SerializedSettings] (
    [Id]               BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (255) NOT NULL,
    [SerializedObject] NVARCHAR (MAX) NOT NULL,
    [ModifiedOn]       DATETIME       NULL,
    [ModifiedBy]       NVARCHAR (512) NULL,
    [CreatedOn]        DATETIME       NOT NULL,
    [CreatedBy]        NVARCHAR (512) NULL,
    [Rowversion]       ROWVERSION     NOT NULL,
    CONSTRAINT [PK_SerializedSettings] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[ShippingMethodToPrice]...';


GO
CREATE TABLE [Uvendia].[ShippingMethodToPrice] (
    [ShippingMethodId] BIGINT NOT NULL,
    [PriceId]          BIGINT NOT NULL,
    CONSTRAINT [PK_ShippingMethodToPrice] PRIMARY KEY CLUSTERED ([ShippingMethodId] ASC, [PriceId] ASC)
);


GO
PRINT N'Creating [Uvendia].[ProductToPrice]...';


GO
CREATE TABLE [Uvendia].[ProductToPrice] (
    [ProductId] BIGINT NOT NULL,
    [PriceId]   BIGINT NOT NULL,
    CONSTRAINT [PK_ProductToPrice] PRIMARY KEY CLUSTERED ([ProductId] ASC, [PriceId] ASC)
);


GO
PRINT N'Creating [Uvendia].[PaymentMethodToPrice]...';


GO
CREATE TABLE [Uvendia].[PaymentMethodToPrice] (
    [PaymentMethodId] BIGINT NOT NULL,
    [PriceId]         BIGINT NOT NULL,
    CONSTRAINT [PK_PaymentMethodToPrice] PRIMARY KEY CLUSTERED ([PaymentMethodId] ASC, [PriceId] ASC)
);


GO
PRINT N'Creating [Uvendia].[ShippingMethod]...';


GO
CREATE TABLE [Uvendia].[ShippingMethod] (
    [Id]                   BIGINT          IDENTITY (1, 1) NOT NULL,
    [Name]                 NVARCHAR (255)  NOT NULL,
    [Description]          NVARCHAR (MAX)  NULL,
    [DeliveryTime]         NVARCHAR (255)  NULL,
    [Enabled]              BIT             NOT NULL,
    [CostPerWeight]        DECIMAL (18, 5) NULL,
    [AvailableInCountries] NVARCHAR (MAX)  NULL,
    [LogoId]               VARCHAR (50)    NULL,
    [ModifiedOn]           DATETIME        NULL,
    [ModifiedBy]           NVARCHAR (512)  NULL,
    [CreatedOn]            DATETIME        NOT NULL,
    [CreatedBy]            NVARCHAR (512)  NULL,
    CONSTRAINT [PK_ShippingMethod] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[ShippingMethod].[IX_ShippingMethod_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_ShippingMethod_Name]
    ON [Uvendia].[ShippingMethod]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[PaymentMethod]...';


GO
CREATE TABLE [Uvendia].[PaymentMethod] (
    [Id]                   BIGINT          IDENTITY (1, 1) NOT NULL,
    [Name]                 NVARCHAR (255)  NOT NULL,
    [Description]          NVARCHAR (MAX)  NULL,
    [Enabled]              BIT             NOT NULL,
    [ServicePercentageFee] DECIMAL (18, 5) NULL,
    [AvailableInCountries] NVARCHAR (MAX)  NULL,
    [SerializedSettings]   NVARCHAR (MAX)  NULL,
    [LogoId]               VARCHAR (50)    NULL,
    [ModifiedOn]           DATETIME        NULL,
    [ModifiedBy]           NVARCHAR (512)  NULL,
    [CreatedOn]            DATETIME        NOT NULL,
    [CreatedBy]            NVARCHAR (512)  NULL,
    CONSTRAINT [PK_PaymentMethod] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[PaymentMethod].[IX_PaymentMethod_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_PaymentMethod_Name]
    ON [Uvendia].[PaymentMethod]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[Price]...';


GO
CREATE TABLE [Uvendia].[Price] (
    [Id]                BIGINT          IDENTITY (1, 1) NOT NULL,
    [PriceDefinitionId] BIGINT          NOT NULL,
    [Value]             DECIMAL (18, 5) NULL,
    [Enabled]           BIT             NOT NULL,
    [ModifiedOn]        DATETIME        NULL,
    [ModifiedBy]        NVARCHAR (512)  NULL,
    [CreatedOn]         DATETIME        NOT NULL,
    [CreatedBy]         NVARCHAR (512)  NULL,
    [Rowversion]        ROWVERSION      NOT NULL,
    CONSTRAINT [PK_Price] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[Price].[IX_Price_DefinitionId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Price_DefinitionId]
    ON [Uvendia].[Price]([PriceDefinitionId] ASC);


GO
PRINT N'Creating [Uvendia].[PriceDefinition]...';


GO
CREATE TABLE [Uvendia].[PriceDefinition] (
    [Id]          BIGINT          IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (255)   NOT NULL,
    [Description] VARCHAR (MAX)   NULL,
    [Currency]    NVARCHAR (50)   NOT NULL,
    [VAT]         DECIMAL (18, 5) NULL,
    [ModifiedOn]  DATETIME        NULL,
    [ModifiedBy]  NVARCHAR (512)  NULL,
    [CreatedOn]   DATETIME        NOT NULL,
    [CreatedBy]   NVARCHAR (512)  NULL,
    [Rowversion]  ROWVERSION      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [uidx_priceDefinitionName] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Uvendia].[PriceDefinition].[IX_PriceDefinition_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_PriceDefinition_Name]
    ON [Uvendia].[PriceDefinition]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[PriceDefinition].[IX_PriceDefinition_Currency]...';


GO
CREATE NONCLUSTERED INDEX [IX_PriceDefinition_Currency]
    ON [Uvendia].[PriceDefinition]([Currency] ASC);


GO
PRINT N'Creating [Uvendia].[StoreToTranslation]...';


GO
CREATE TABLE [Uvendia].[StoreToTranslation] (
    [StoreId]       BIGINT NOT NULL,
    [TranslationId] BIGINT NOT NULL,
    CONSTRAINT [PK_StoreToTranslation] PRIMARY KEY CLUSTERED ([StoreId] ASC, [TranslationId] ASC)
);


GO
PRINT N'Creating [Uvendia].[Store]...';


GO
CREATE TABLE [Uvendia].[Store] (
    [Id]           BIGINT         IDENTITY (1, 1) NOT NULL,
    [ExternalId]   VARCHAR (255)  NULL,
    [Name]         NVARCHAR (255) NOT NULL,
    [OrderNr]      SMALLINT       NOT NULL,
    [Published]    BIT            NOT NULL,
    [DefinitionId] BIGINT         NULL,
    [ModifiedOn]   DATETIME       NULL,
    [ModifiedBy]   NVARCHAR (512) NULL,
    [CreatedOn]    DATETIME       NOT NULL,
    [CreatedBy]    NVARCHAR (512) NULL,
    [Rowversion]   ROWVERSION     NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [uidx_store_name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Uvendia].[Store].[IX_Store_Name]...';


GO
CREATE NONCLUSTERED INDEX [IX_Store_Name]
    ON [Uvendia].[Store]([Name] ASC);


GO
PRINT N'Creating [Uvendia].[PropertyValue]...';


GO
CREATE TABLE [Uvendia].[PropertyValue] (
    [Id]         BIGINT         IDENTITY (1, 1) NOT NULL,
    [PropertyId] BIGINT         NOT NULL,
    [ItemId]     BIGINT         NOT NULL,
    [Value]      VARCHAR (MAX)  NULL,
    [Section]    VARCHAR (255)  NOT NULL,
    [ModifiedOn] DATETIME       NULL,
    [ModifiedBy] NVARCHAR (512) NULL,
    [CreatedOn]  DATETIME       NOT NULL,
    [CreatedBy]  NVARCHAR (512) NULL,
    CONSTRAINT [PK_PropertyValue] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Uvendia].[PropertyValue].[IX_PropertyValue_PropertyId]...';


GO
CREATE NONCLUSTERED INDEX [IX_PropertyValue_PropertyId]
    ON [Uvendia].[PropertyValue]([PropertyId] ASC);


GO
PRINT N'Creating [Uvendia].[PropertyValue].[IX_PropertyValue_ItemId_Section]...';


GO
CREATE NONCLUSTERED INDEX [IX_PropertyValue_ItemId_Section]
    ON [Uvendia].[PropertyValue]([ItemId] ASC, [Section] ASC);


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Definition]...';


GO
ALTER TABLE [Uvendia].[Definition]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Definition]...';


GO
ALTER TABLE [Uvendia].[Definition]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Translation]...';


GO
ALTER TABLE [Uvendia].[Translation]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Translation]...';


GO
ALTER TABLE [Uvendia].[Translation]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Cart]...';


GO
ALTER TABLE [Uvendia].[Cart]
    ADD DEFAULT 0 FOR [TicketCancellationInsured];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Cart]...';


GO
ALTER TABLE [Uvendia].[Cart]
    ADD DEFAULT 0 FOR [ItemDiscount];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Cart]...';


GO
ALTER TABLE [Uvendia].[Cart]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Cart]...';


GO
ALTER TABLE [Uvendia].[Cart]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Cart]...';


GO
ALTER TABLE [Uvendia].[Cart]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketOrderDetail]...';


GO
ALTER TABLE [Uvendia].[TicketOrderDetail]
    ADD DEFAULT (NEWID()) FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketOrderDetail]...';


GO
ALTER TABLE [Uvendia].[TicketOrderDetail]
    ADD DEFAULT 0 FOR [SalePrice];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketOrderDetail]...';


GO
ALTER TABLE [Uvendia].[TicketOrderDetail]
    ADD DEFAULT 1 FOR [Quantity];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketOrderDetail]...';


GO
ALTER TABLE [Uvendia].[TicketOrderDetail]
    ADD DEFAULT 0 FOR [CancellationInsured];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketSale]...';


GO
ALTER TABLE [Uvendia].[TicketSale]
    ADD DEFAULT 0 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketSale]...';


GO
ALTER TABLE [Uvendia].[TicketSale]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[TicketSale]...';


GO
ALTER TABLE [Uvendia].[TicketSale]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Category]...';


GO
ALTER TABLE [Uvendia].[Category]
    ADD DEFAULT 100 FOR [OrderNr];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Category]...';


GO
ALTER TABLE [Uvendia].[Category]
    ADD DEFAULT 0 FOR [Published];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Category]...';


GO
ALTER TABLE [Uvendia].[Category]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Category]...';


GO
ALTER TABLE [Uvendia].[Category]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Property]...';


GO
ALTER TABLE [Uvendia].[Property]
    ADD DEFAULT (0) FOR [IsVariant];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Property]...';


GO
ALTER TABLE [Uvendia].[Property]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Property]...';


GO
ALTER TABLE [Uvendia].[Property]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[ProductOrderDetail]...';


GO
ALTER TABLE [Uvendia].[ProductOrderDetail]
    ADD DEFAULT (NEWID()) FOR [Id];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[ProductOrderDetail]...';


GO
ALTER TABLE [Uvendia].[ProductOrderDetail]
    ADD DEFAULT 0 FOR [SalePrice];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[ProductOrderDetail]...';


GO
ALTER TABLE [Uvendia].[ProductOrderDetail]
    ADD DEFAULT 0 FOR [Retoured];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Order]...';


GO
ALTER TABLE [Uvendia].[Order]
    ADD DEFAULT getdate() FOR [OrderDate];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Order]...';


GO
ALTER TABLE [Uvendia].[Order]
    ADD DEFAULT 0 FOR [Paid];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Order]...';


GO
ALTER TABLE [Uvendia].[Order]
    ADD DEFAULT 0 FOR [PaidAmount];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Order]...';


GO
ALTER TABLE [Uvendia].[Order]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Order]...';


GO
ALTER TABLE [Uvendia].[Order]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT 100 FOR [OrderNr];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT 0 FOR [HasVariant];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT 0 FOR [Published];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT 1 FOR [IsAvailable];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT (getdate()) FOR [PublishedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT 0 FOR [HasStockIndication];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Product]...';


GO
ALTER TABLE [Uvendia].[Product]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Review]...';


GO
ALTER TABLE [Uvendia].[Review]
    ADD DEFAULT 5 FOR [Stars];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Review]...';


GO
ALTER TABLE [Uvendia].[Review]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Review]...';


GO
ALTER TABLE [Uvendia].[Review]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT 100 FOR [OrderNr];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT 0 FOR [Published];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT 1 FOR [EventStatusId];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT 0 FOR [IsTicketSaleEnabled];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT 0 FOR [HasCancellationInsurance];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Event]...';


GO
ALTER TABLE [Uvendia].[Event]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Address]...';


GO
ALTER TABLE [Uvendia].[Address]
    ADD DEFAULT 1 FOR [AddressTypeId];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Address]...';


GO
ALTER TABLE [Uvendia].[Address]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Address]...';


GO
ALTER TABLE [Uvendia].[Address]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Subscription]...';


GO
ALTER TABLE [Uvendia].[Subscription]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Subscription]...';


GO
ALTER TABLE [Uvendia].[Subscription]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Subscription]...';


GO
ALTER TABLE [Uvendia].[Subscription]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Inventory]...';


GO
ALTER TABLE [Uvendia].[Inventory]
    ADD DEFAULT 0 FOR [Stock];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Inventory]...';


GO
ALTER TABLE [Uvendia].[Inventory]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Inventory]...';


GO
ALTER TABLE [Uvendia].[Inventory]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[SerializedSettings]...';


GO
ALTER TABLE [Uvendia].[SerializedSettings]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[SerializedSettings]...';


GO
ALTER TABLE [Uvendia].[SerializedSettings]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[ShippingMethod]...';


GO
ALTER TABLE [Uvendia].[ShippingMethod]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[ShippingMethod]...';


GO
ALTER TABLE [Uvendia].[ShippingMethod]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[ShippingMethod]...';


GO
ALTER TABLE [Uvendia].[ShippingMethod]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PaymentMethod]...';


GO
ALTER TABLE [Uvendia].[PaymentMethod]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PaymentMethod]...';


GO
ALTER TABLE [Uvendia].[PaymentMethod]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PaymentMethod]...';


GO
ALTER TABLE [Uvendia].[PaymentMethod]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Price]...';


GO
ALTER TABLE [Uvendia].[Price]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Price]...';


GO
ALTER TABLE [Uvendia].[Price]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Price]...';


GO
ALTER TABLE [Uvendia].[Price]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PriceDefinition]...';


GO
ALTER TABLE [Uvendia].[PriceDefinition]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PriceDefinition]...';


GO
ALTER TABLE [Uvendia].[PriceDefinition]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Store]...';


GO
ALTER TABLE [Uvendia].[Store]
    ADD DEFAULT 100 FOR [OrderNr];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Store]...';


GO
ALTER TABLE [Uvendia].[Store]
    ADD DEFAULT 0 FOR [Published];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Store]...';


GO
ALTER TABLE [Uvendia].[Store]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[Store]...';


GO
ALTER TABLE [Uvendia].[Store]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PropertyValue]...';


GO
ALTER TABLE [Uvendia].[PropertyValue]
    ADD DEFAULT 'Product' FOR [Section];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PropertyValue]...';


GO
ALTER TABLE [Uvendia].[PropertyValue]
    ADD DEFAULT (getdate()) FOR [ModifiedOn];


GO
PRINT N'Creating unnamed constraint on [Uvendia].[PropertyValue]...';


GO
ALTER TABLE [Uvendia].[PropertyValue]
    ADD DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [Uvendia].[FK_ProductToTranslation_Product]...';


GO
ALTER TABLE [Uvendia].[ProductToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductToTranslation_Product] FOREIGN KEY ([ProductId]) REFERENCES [Uvendia].[Product] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductToTranslation_Translation]...';


GO
ALTER TABLE [Uvendia].[ProductToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductToTranslation_Translation] FOREIGN KEY ([TranslationId]) REFERENCES [Uvendia].[Translation] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [Uvendia].[FK_CategoryToTranslation_Category]...';


GO
ALTER TABLE [Uvendia].[CategoryToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_CategoryToTranslation_Category] FOREIGN KEY ([CategoryId]) REFERENCES [Uvendia].[Category] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_CategoryToTranslation_Translation]...';


GO
ALTER TABLE [Uvendia].[CategoryToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_CategoryToTranslation_Translation] FOREIGN KEY ([TranslationId]) REFERENCES [Uvendia].[Translation] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [Uvendia].[FK_Definition_ParentDef]...';


GO
ALTER TABLE [Uvendia].[Definition] WITH NOCHECK
    ADD CONSTRAINT [FK_Definition_ParentDef] FOREIGN KEY ([InheritId]) REFERENCES [Uvendia].[Definition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Cart_Reference_Product_ID]...';


GO
ALTER TABLE [Uvendia].[Cart] WITH NOCHECK
    ADD CONSTRAINT [FK_Cart_Reference_Product_ID] FOREIGN KEY ([ProductId]) REFERENCES [Uvendia].[Product] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Cart_Reference_TicketSale_ID]...';


GO
ALTER TABLE [Uvendia].[Cart] WITH NOCHECK
    ADD CONSTRAINT [FK_Cart_Reference_TicketSale_ID] FOREIGN KEY ([TicketSaleId]) REFERENCES [Uvendia].[TicketSale] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Cart_Reference_Price_ID]...';


GO
ALTER TABLE [Uvendia].[Cart] WITH NOCHECK
    ADD CONSTRAINT [FK_Cart_Reference_Price_ID] FOREIGN KEY ([UnitPriceId]) REFERENCES [Uvendia].[Price] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_TicketOrderDetail_Reference_Order]...';


GO
ALTER TABLE [Uvendia].[TicketOrderDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketOrderDetail_Reference_Order] FOREIGN KEY ([OrderId]) REFERENCES [Uvendia].[Order] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_TicketOrderDetail_Reference_TicketSale]...';


GO
ALTER TABLE [Uvendia].[TicketOrderDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketOrderDetail_Reference_TicketSale] FOREIGN KEY ([TicketSaleId]) REFERENCES [Uvendia].[TicketSale] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_TicketSale_Event]...';


GO
ALTER TABLE [Uvendia].[TicketSale] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketSale_Event] FOREIGN KEY ([EventId]) REFERENCES [Uvendia].[Event] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_TicketSale_Reference_Price]...';


GO
ALTER TABLE [Uvendia].[TicketSale] WITH NOCHECK
    ADD CONSTRAINT [FK_TicketSale_Reference_Price] FOREIGN KEY ([TicketPriceId]) REFERENCES [Uvendia].[Price] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductToCategory_Product]...';


GO
ALTER TABLE [Uvendia].[ProductToCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductToCategory_Product] FOREIGN KEY ([ProductId]) REFERENCES [Uvendia].[Product] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductToCategory_ProductCategory]...';


GO
ALTER TABLE [Uvendia].[ProductToCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductToCategory_ProductCategory] FOREIGN KEY ([CategoryId]) REFERENCES [Uvendia].[Category] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ParentCategory_Reference_ProductCategory_ID]...';


GO
ALTER TABLE [Uvendia].[Category] WITH NOCHECK
    ADD CONSTRAINT [FK_ParentCategory_Reference_ProductCategory_ID] FOREIGN KEY ([ParentCategoryId]) REFERENCES [Uvendia].[Category] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Category_Reference_Store_ID]...';


GO
ALTER TABLE [Uvendia].[Category] WITH NOCHECK
    ADD CONSTRAINT [FK_Category_Reference_Store_ID] FOREIGN KEY ([StoreId]) REFERENCES [Uvendia].[Store] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Category_Reference_Definintion_ID]...';


GO
ALTER TABLE [Uvendia].[Category] WITH NOCHECK
    ADD CONSTRAINT [FK_Category_Reference_Definintion_ID] FOREIGN KEY ([DefinitionId]) REFERENCES [Uvendia].[Definition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Property_Definition]...';


GO
ALTER TABLE [Uvendia].[Property] WITH NOCHECK
    ADD CONSTRAINT [FK_Property_Definition] FOREIGN KEY ([DefinitionId]) REFERENCES [Uvendia].[Definition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductOrderDetail_Reference_Order]...';


GO
ALTER TABLE [Uvendia].[ProductOrderDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductOrderDetail_Reference_Order] FOREIGN KEY ([OrderId]) REFERENCES [Uvendia].[Order] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductOrderDetail_Reference_Product]...';


GO
ALTER TABLE [Uvendia].[ProductOrderDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductOrderDetail_Reference_Product] FOREIGN KEY ([ProductId]) REFERENCES [Uvendia].[Product] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductOrderDetail_Reference_Price]...';


GO
ALTER TABLE [Uvendia].[ProductOrderDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductOrderDetail_Reference_Price] FOREIGN KEY ([UnitPriceId]) REFERENCES [Uvendia].[Price] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Order_Reference_Address_Invoice]...';


GO
ALTER TABLE [Uvendia].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Order_Reference_Address_Invoice] FOREIGN KEY ([InvoiceAddressId]) REFERENCES [Uvendia].[Address] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Order_Reference_Address_Ship]...';


GO
ALTER TABLE [Uvendia].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Order_Reference_Address_Ship] FOREIGN KEY ([ShipAddressId]) REFERENCES [Uvendia].[Address] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Order_Reference_PaymentMethod]...';


GO
ALTER TABLE [Uvendia].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Order_Reference_PaymentMethod] FOREIGN KEY ([PaymentMethodId]) REFERENCES [Uvendia].[PaymentMethod] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Order_Reference_ShippingMethod]...';


GO
ALTER TABLE [Uvendia].[Order] WITH NOCHECK
    ADD CONSTRAINT [FK_Order_Reference_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [Uvendia].[ShippingMethod] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Product_Reference_Definintion_ID]...';


GO
ALTER TABLE [Uvendia].[Product] WITH NOCHECK
    ADD CONSTRAINT [FK_Product_Reference_Definintion_ID] FOREIGN KEY ([DefinitionId]) REFERENCES [Uvendia].[Definition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Event_Address]...';


GO
ALTER TABLE [Uvendia].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Address] FOREIGN KEY ([AddressId]) REFERENCES [Uvendia].[Address] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_Event_Reference_Definintion_ID]...';


GO
ALTER TABLE [Uvendia].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Reference_Definintion_ID] FOREIGN KEY ([DefinitionId]) REFERENCES [Uvendia].[Definition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_EventToPrice_Event]...';


GO
ALTER TABLE [Uvendia].[EventToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_EventToPrice_Event] FOREIGN KEY ([EventId]) REFERENCES [Uvendia].[Event] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_EventToPrice_Price]...';


GO
ALTER TABLE [Uvendia].[EventToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_EventToPrice_Price] FOREIGN KEY ([PriceId]) REFERENCES [Uvendia].[Price] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [Uvendia].[FK_Inventory_Reference_Product_Id]...';


GO
ALTER TABLE [Uvendia].[Inventory] WITH NOCHECK
    ADD CONSTRAINT [FK_Inventory_Reference_Product_Id] FOREIGN KEY ([ProductId]) REFERENCES [Uvendia].[Product] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_EventToTranslation_Product]...';


GO
ALTER TABLE [Uvendia].[EventToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_EventToTranslation_Product] FOREIGN KEY ([EventId]) REFERENCES [Uvendia].[Event] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_EventToTranslation_Translation]...';


GO
ALTER TABLE [Uvendia].[EventToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_EventToTranslation_Translation] FOREIGN KEY ([TranslationId]) REFERENCES [Uvendia].[Translation] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [Uvendia].[FK_ShippingMethodToPrice_ShippingMethod]...';


GO
ALTER TABLE [Uvendia].[ShippingMethodToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_ShippingMethodToPrice_ShippingMethod] FOREIGN KEY ([ShippingMethodId]) REFERENCES [Uvendia].[ShippingMethod] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ShippingMethodToPrice_Price]...';


GO
ALTER TABLE [Uvendia].[ShippingMethodToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_ShippingMethodToPrice_Price] FOREIGN KEY ([PriceId]) REFERENCES [Uvendia].[Price] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductToPrice_Product]...';


GO
ALTER TABLE [Uvendia].[ProductToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductToPrice_Product] FOREIGN KEY ([ProductId]) REFERENCES [Uvendia].[Product] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductToPrice_Price]...';


GO
ALTER TABLE [Uvendia].[ProductToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductToPrice_Price] FOREIGN KEY ([PriceId]) REFERENCES [Uvendia].[Price] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [Uvendia].[FK_PaymentMethodToPrice_Payment]...';


GO
ALTER TABLE [Uvendia].[PaymentMethodToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_PaymentMethodToPrice_Payment] FOREIGN KEY ([PaymentMethodId]) REFERENCES [Uvendia].[PaymentMethod] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_PaymentMethodToPrice_Price]...';


GO
ALTER TABLE [Uvendia].[PaymentMethodToPrice] WITH NOCHECK
    ADD CONSTRAINT [FK_PaymentMethodToPrice_Price] FOREIGN KEY ([PriceId]) REFERENCES [Uvendia].[Price] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_ProductPrice_PriceDefinition]...';


GO
ALTER TABLE [Uvendia].[Price] WITH NOCHECK
    ADD CONSTRAINT [FK_ProductPrice_PriceDefinition] FOREIGN KEY ([PriceDefinitionId]) REFERENCES [Uvendia].[PriceDefinition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_StoreToTranslation_Store]...';


GO
ALTER TABLE [Uvendia].[StoreToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_StoreToTranslation_Store] FOREIGN KEY ([StoreId]) REFERENCES [Uvendia].[Store] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_StoreToTranslation_Translation]...';


GO
ALTER TABLE [Uvendia].[StoreToTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_StoreToTranslation_Translation] FOREIGN KEY ([TranslationId]) REFERENCES [Uvendia].[Translation] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [Uvendia].[FK_Store_Reference_Definintion_ID]...';


GO
ALTER TABLE [Uvendia].[Store] WITH NOCHECK
    ADD CONSTRAINT [FK_Store_Reference_Definintion_ID] FOREIGN KEY ([DefinitionId]) REFERENCES [Uvendia].[Definition] ([Id]);


GO
PRINT N'Creating [Uvendia].[FK_PropertyValue_Property]...';


GO
ALTER TABLE [Uvendia].[PropertyValue] WITH NOCHECK
    ADD CONSTRAINT [FK_PropertyValue_Property] FOREIGN KEY ([PropertyId]) REFERENCES [Uvendia].[Property] ([Id]);


GO
PRINT N'Creating [Uvendia].[fnSplitString]...';


GO
CREATE FUNCTION [Uvendia].[fnSplitString] 
( 
    @string NVARCHAR(MAX), 
    @delimiter CHAR(1) 
) 
RETURNS @output TABLE(splitdata NVARCHAR(MAX) 
) 
BEGIN 
    DECLARE @start INT, @end INT 
    SELECT @start = 1, @end = CHARINDEX(@delimiter, @string) 
    WHILE @start < LEN(@string) + 1 BEGIN 
        IF @end = 0  
            SET @end = LEN(@string) + 1
       
        INSERT INTO @output (splitdata)  
        VALUES(SUBSTRING(@string, @start, @end - @start)) 
        SET @start = @end + 1 
        SET @end = CHARINDEX(@delimiter, @string, @start)
        
    END 
    RETURN 
END
GO
PRINT N'Creating [Uvendia].[GetSoldTickets]...';


GO
/*
	Get sold tickets.
	
	Create date: 31 July 2014
	Created by: Sherlon Gerard

	Changed date: 06 Jan 2019
	Modified for Uvendia Studio Webshop e-ticket system
*/

CREATE PROCEDURE [Uvendia].[GetSoldTickets]
	@eventId int = 0,
	@orderStatus varchar(200)
AS
	select 
		a.[Name] as EventName,
		ts.[Description] as TicketDescription,
		ts.TicketTypeId as TicketTypeId,		
		tod.Id as TicketId,
		addr.[FirstName] + ' ' + addr.[LastName] as CustomerName,
		addr.Email as CustomerEmail,
		o.Id as OrderId,
		o.OrderNumber,
		o.OrderDate,
		o.OrderStatusId,
		tod.CancellationInsured
	from TicketOrderDetail tod
	inner join [Order] o on tod.OrderId = o.Id and /*o.Paid = 1 and*/ o.OrderStatusId in (SELECT splitdata FROM [Uvendia].[fnSplitString](@orderStatus, ','))
	inner join TicketSale ts on tod.TicketSaleId = ts.Id
	inner join [Event] a on ts.EventId = a.Id and a.Id = @eventId
	left join [Address] addr on o.InvoiceAddressID = addr.Id
	order by cast(tod.Id as varchar(50))

RETURN
GO
PRINT N'Creating [Uvendia].[ResetOrderAddresses]...';


GO
/*
	Reset the order addresses
	
	Create date: 22 june 2014
	Created by: Sherlon Gerard
*/

CREATE PROCEDURE [Uvendia].[ResetOrderAddresses]
	@cookieId uniqueidentifier	
AS
	declare @invoiceAddressId int
	declare @shipAddressId int

	select @invoiceAddressId = o.InvoiceAddressId, @shipAddressId = o.ShipAddressId from [Uvendia].[Order] o where o.CookieId = @cookieId

	update [Uvendia].[Order] set InvoiceAddressId = null, ShipAddressId = null where CookieID = @cookieId

	-- Clean the address table.	
	delete from [Uvendia].[Address] where ID = @invoiceAddressId
	delete from [Uvendia].[Address] where ID = @shipAddressId
	

RETURN
GO
PRINT N'Creating [Uvendia].[GetTotalTicketTypeQuanityAvailable]...';


GO
/*
	Check and get quantity tickets still available
	
	Create date: 22 june 2014
	Created by: Sherlon Gerard

	Changed date: 08 Aug 2019
	Modified for Uvendia Studio Webshop e-ticket system
*/

CREATE PROCEDURE [Uvendia].[GetTotalTicketTypeQuanityAvailable]	
	@ticketSaleId bigint,
	@eventId bigint = null,
	@minutesOld int = 30 -- Ignore tickets in table 'Cart' older than given minutes
AS

	with TempTicketOrderDetail as
	(
		select sum(isnull(tod.Quantity, 0)) as TotalTicketsSold
			from [Uvendia].TicketOrderDetail tod				
				inner join [Uvendia].TicketSale ts on tod.TicketSaleID = ts.Id 
					and (@ticketSaleId is null or @ticketSaleId = 0 or ts.Id = @ticketSaleId)
					and (@eventId is null or @eventId = 0 or ts.EventId = @eventId)	
				inner join [Uvendia].[Order] o on tod.OrderId = o.Id and o.OrderStatusId not in (0,1,6) -- don't count 'none', 'new order' and 'cancelled' orders		
	),
	TempShoppingCart as
	(
		select SUM(ISNULL(sci.Quantity, 0)) as TotalTicketsInCart
		from [Uvendia].Cart sci
			inner join [Uvendia].TicketSale ts on sci.TicketSaleId = ts.Id				
				and (@ticketSaleId is null or @ticketSaleId = 0 or ts.Id = @ticketSaleId)
				and (@eventId is null or @eventId = 0 or ts.EventId = @eventId)	
			where
				-- only active items in the shopping cart table
				sci.IsActive = 1 
				and (convert(date, sci.CreatedOn) = convert(date, getdate()))
				and (@minutesOld IS NULL OR (DATEDIFF(minute, sci.CreatedOn, getdate())) < @minutesOld)
	)

	select  (isnull(ts.QuantityAvailable, e.TotalTicketsAvailable) - isnull((select TotalTicketsSold from TempTicketOrderDetail), 0) - isnull((select TotalTicketsInCart from TempShoppingCart), 0)) TotalTicketsAvailable	
	from [Uvendia].TicketSale ts inner join [Uvendia].[Event] e on ts.EventId = e.Id
	where (@ticketSaleId is null or @ticketSaleId = 0 or ts.Id = @ticketSaleId) and (@eventId is null or @eventId = 0 or ts.EventId = @eventId)		

RETURN
GO
PRINT N'Creating [Uvendia].[GetProductsPaged]...';


GO
/*
	Get products paged.
	
	Create date: 25 Oct 2018
	Created by: Sherlon Gerard
*/

CREATE PROCEDURE [Uvendia].[GetProductsPaged]
	@pageIndex as int,
    @pageSize as int,
    @totalRowCount as int OUTPUT,
	@priceDefinitionId as bigint = null,
	@catId smallint = null,
	@published bit = null,
	@sortBy varchar(100) = 'newest'
AS

	SET NOCOUNT ON

	DECLARE @FoundProds TABLE
    (
        Id int IDENTITY,    
        ProdId bigint,
		TotalSold int,
		TotalStars int,
		PriceValue DECIMAL(18, 5)
    );

	DECLARE @ReturnProds TABLE
    (
        Id int IDENTITY,    
        ProdId bigint,
		TotalSold int,
		TotalStars int,
		PriceValue DECIMAL(18, 5)
    );

	INSERT INTO @FoundProds(ProdId, TotalSold, TotalStars, PriceValue)
		select distinct p.Id, sum(ISNULL(pod.Quantity, 0)) TotalSold, sum(ISNULL(r.Stars, 0)) TotalStars, ISNULL(price.[Value], 0) PriceValue			
		from [Uvendia].Product p 
		inner join [Uvendia].[ProductToCategory] pc on p.Id = pc.ProductId 
		left join [Uvendia].[Review] r on p.[Id] = r.[ItemId]
		left join [Uvendia].[ProductOrderDetail] pod on p.[Id] = pod.[ProductId]
		left join [Uvendia].[ProductToPrice] ptp on p.[Id] = ptp.[ProductId]
		left join [Uvendia].[Price] price on ptp.[PriceId] = price.[Id]
		WHERE (price.PriceDefinitionId IS NULL OR @priceDefinitionId IS NULL OR price.PriceDefinitionId = @priceDefinitionId) 
			AND (@catId IS NULL OR pc.CategoryId = @catId) AND (@published IS NULL OR p.Published = @published)
		group by p.Id, price.[Value]

	SELECT @totalRowCount = COUNT(*) FROM @FoundProds -- total records found.

	SET ROWCOUNT @pageSize; -- Max rows to return.

	DECLARE @currentRowID INT
    SET @currentRowID = ((@pageIndex - 1) * @pageSize)     

	--IF @pageIndex > 0 BEGIN
    --   SET @currentRowID = (@pageIndex * @pageSize) + 1
    --END 

	INSERT INTO @ReturnProds(ProdId, TotalSold, TotalStars, PriceValue)
		select ProdId, TotalSold, TotalStars, PriceValue from @FoundProds f
		where (f.ID > @currentRowID)

	SET ROWCOUNT 0  

	SELECT p.*, d.*, prop.*, pv.*, price.*, priceDef.*, t.*
    FROM [Uvendia].[Product] AS p
        inner join @ReturnProds AS f ON p.Id = f.ProdId
		left join [Uvendia].[ProductToPrice] ptp on p.[Id] = ptp.[ProductId]
		left join [Uvendia].[Price] price on ptp.[PriceId] = price.[Id]
		left join [Uvendia].[PriceDefinition] priceDef on price.[PriceDefinitionId] = priceDef.[Id]
		left join [Uvendia].[Definition] d on p.[DefinitionId] = d.[Id]
		left join [Uvendia].[Property] prop on d.[Id] = prop.[DefinitionId]  
		left join [Uvendia].[PropertyValue] pv on prop.[Id] = pv.[PropertyId] and p.[Id] = pv.[ItemId] and pv.Section = 'Product'
		left join [Uvendia].[ProductToTranslation] ptt on p.[Id] = ptt.[ProductId]
		left join [Uvendia].[Translation] t on ptt.[TranslationId] = t.[Id]
	order by
	case @sortBy when 'popularity' then f.TotalSold end desc,
	case @sortBy when 'cheapest' then f.PriceValue end asc,
	case @sortBy when 'mostexpensive' then f.PriceValue end desc,
	case @sortBy when 'updated' then p.ModifiedOn end desc,
	case @sortBy when 'newest' then p.CreatedOn end desc,
	case @sortBy when 'oldest' then p.CreatedOn end asc,
	case @sortBy when 'bestreviewed' then f.TotalStars end desc,
	case @sortBy when 'title_az' then p.[Name] end asc,
	case @sortBy when 'title_za' then p.[Name] end desc,
	p.CreatedOn asc

      
	SET NOCOUNT OFF

	
RETURN
GO
PRINT N'Creating [Uvendia].[GetInterestingProducts]...';


GO
CREATE PROCEDURE [Uvendia].[GetInterestingProducts]
	@categories varchar(200) = null,
	@currentProdIds varchar(200) = null,
	@take int = 3,
	@published bit = null
AS

DECLARE @Products TABLE
(
    ID bigint,
	ItemCount bigint
);

INSERT INTO @Products(ID, ItemCount)
	SELECT TOP(@take)
		P.ID, 		
		COUNT(OD.ProductID) AS ItemCount	
	FROM [Uvendia].ProductOrderDetail OD
		INNER JOIN [Uvendia].Product P ON OD.ProductID = P.ID
		INNER JOIN [Uvendia].ProductToCategory PTC ON P.ID = PTC.ProductID
	WHERE (@published is null or P.Published = @published)
		AND (@categories IS NULL OR @categories = '' OR PTC.CategoryID IN (SELECT SPLITDATA FROM [Uvendia].FNSPLITSTRING(@categories, ',')))
		AND (@currentProdIds IS NULL OR @currentProdIds = '' OR P.ID NOT IN (SELECT SPLITDATA FROM [Uvendia].FNSPLITSTRING(@currentProdIds, ',')))	
		AND (P.VariantSku IS NULL)
	GROUP BY P.ID
	ORDER BY ItemCount DESC

IF ((NOT EXISTS (SELECT 1 FROM @Products)) OR ((SELECT COUNT(ID) FROM @Products) < @take))
BEGIN

SET @take = @take - (SELECT COUNT(ID) FROM @Products);

INSERT INTO @Products(ID, ItemCount)
SELECT TOP(@take)
		P.ID, 		
		0 AS ItemCount
		FROM [Uvendia].PRODUCT P 
			INNER JOIN [Uvendia].ProductToCategory PTC ON P.ID = PTC.ProductID
		WHERE (@published is null or P.Published = @published)
			AND (@categories IS NULL OR @categories = '' OR PTC.CategoryID IN (SELECT SPLITDATA FROM [Uvendia].fnSplitString(@categories, ',')))
			AND (@currentProdIds IS NULL OR @currentProdIds = '' OR P.ID NOT IN (SELECT SPLITDATA FROM [Uvendia].fnSplitString(@currentProdIds, ',')))
			AND (P.VariantSku IS NULL)
		ORDER BY NEWID()
END

SELECT 
		p.*, d.*, prop.*, pv.*, price.*, priceDef.*, t.*
		FROM [Uvendia].[Product] p
		inner join @Products temp ON p.ID = temp.ID
		left join [Uvendia].[ProductToPrice] ptp on p.[Id] = ptp.[ProductId]
        left join [Uvendia].[Price] price on ptp.[PriceId] = price.[Id]
        left join [Uvendia].[PriceDefinition] priceDef on price.[PriceDefinitionId] = priceDef.[Id]
        left join [Uvendia].[Definition] d on p.[DefinitionId] = d.[Id]
        left join [Uvendia].[Property] prop on d.[Id] = prop.[DefinitionId]  
        left join [Uvendia].[PropertyValue] pv on prop.[Id] = pv.[PropertyId] and p.[Id] = pv.[ItemId] and pv.Section = 'Product'
		left join [Uvendia].[ProductToTranslation] ptt on p.[Id] = ptt.[ProductId]
		left join [Uvendia].[Translation] t on ptt.[TranslationId] = t.[Id]


RETURN
GO
PRINT N'Creating [Uvendia].[GetAllCloudinaryObjects]...';


GO
/*
	Get stores paged.
	
	Create date: 26 June 2019
	Created by: Sherlon Gerard
*/

CREATE PROCEDURE [Uvendia].[GetAllCloudinaryObjects]
    @dataTypeId as smallint,
	@pageIndex as int,
    @pageSize as int,
    @totalRowCount as int OUTPUT,
	@sortBy varchar(100) = 'CreatedOn',
	@sortDirection varchar(10) = 'ASC'
AS


	select distinct @totalRowCount = count(pv.[Value])
	from [Uvendia].[PropertyValue] pv inner join [Uvendia].[Property] prop on pv.PropertyId = prop.Id
	where prop.DataTypeId=@dataTypeId and pv.[Value] is not null and pv.[Value] <> ''

	SELECT TOP (@pageSize)  Paged.* 
	FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY [Value]) AS [Row], [Value] FROM (
				select distinct pv.[Value]
				from [Uvendia].[PropertyValue] pv inner join [Uvendia].[Property] prop on pv.PropertyId = prop.Id
				where prop.DataTypeId=@dataTypeId and pv.[Value] is not null and pv.[Value] <> ''
				) [Value]
		  ) AS Paged 
    WHERE [Row] > ((@pageIndex - 1) * @pageSize);

RETURN
GO
PRINT N'Creating [Uvendia].[GetStores]...';


GO
/*
	Get stores paged.
	
	Create date: 29 Oct 2018
	Created by: Sherlon Gerard
*/

CREATE PROCEDURE [Uvendia].[GetStores]
	@pageIndex as int,
    @pageSize as int,
    @totalRowCount as int OUTPUT,
	@published bit = null,
	@sortBy varchar(100) = 'CreatedOn',
	@sortDirection varchar(10) = 'ASC'
AS

	SELECT @totalRowCount = COUNT(*) FROM [Uvendia].[Store] o
    WHERE (@published IS NULL OR o.Published = @published) 

	SELECT TOP (@pageSize)  Paged.* 
	FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY CreatedOn) AS [Row], o.* FROM [Uvendia].[Store] o
			WHERE (@published IS NULL OR o.Published = @published) 
		  ) AS Paged 
    WHERE [Row] > ((@pageIndex - 1) * @pageSize);

	
RETURN
GO
PRINT N'Creating [Uvendia].[GetEventsByStatusId]...';


GO
/*
	Get events paged.
	
	Create date: 29 Oct 2018
	Created by: Sherlon Gerard
*/

CREATE PROCEDURE [Uvendia].[GetEventsByStatusId]
	@pageIndex as int,
    @pageSize as int,
    @totalRowCount as int OUTPUT,
	
	@statusId smallint,
	@sortBy varchar(100) = 'CreatedOn',
	@sortDirection varchar(10) = 'ASC'
AS

	SELECT @totalRowCount = COUNT(*) FROM [Uvendia].[Event] o
    WHERE o.EventStatusId = @statusId;							-- total records found.

	SELECT TOP (@pageSize)  Paged.* 
	FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY CreatedOn) AS [Row], o.* FROM [Uvendia].[Event] o
            WHERE o.EventStatusId = @statusId
		  ) AS Paged 
    WHERE [Row] > ((@pageIndex - 1) * @pageSize);

	
RETURN
GO
PRINT N'Creating [Uvendia].[GetOrdersByStatusId]...';


GO
/*
	Get orders paged.
	
	Create date: 29 Oct 2018
	Created by: Sherlon Gerard
*/

CREATE PROCEDURE [Uvendia].[GetOrdersByStatusId]
	@pageIndex as int,
    @pageSize as int,
    @totalRowCount as int OUTPUT,
	
	@statusId smallint,
	@sortBy varchar(100) = 'CreatedOn',
	@sortDirection varchar(10) = 'ASC',
	@createdBy varchar(255) = null
AS
	-- total records found.
	SELECT @totalRowCount = COUNT(*) FROM [Uvendia].[Order] o
    WHERE o.OrderStatusId = @statusId and (@createdBy is null or o.CreatedBy = @createdBy);		

	SELECT TOP (@pageSize)  Paged.* 
	FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY CreatedOn DESC) AS [Row], o.* FROM [Uvendia].[Order] o
            WHERE o.OrderStatusId = @statusId and (@createdBy is null or o.CreatedBy = @createdBy)
		  ) AS Paged 
    WHERE [Row] > ((@pageIndex - 1) * @pageSize);

	
RETURN
GO
PRINT N'Creating [Uvendia].[GetNewestProducts]...';


GO
CREATE PROCEDURE [Uvendia].[GetNewestProducts]
	@take int = 3,
	@published bit = null
AS

WITH TEMPTABLE AS 
(
	SELECT TOP(@take)
		p.Id
	FROM [Uvendia].Product P	
	WHERE (@published is null or P.Published = @published) AND (P.VariantSku IS NULL)
	ORDER BY p.PublishedOn DESC
)

SELECT 
	p.*, d.*, prop.*, pv.*, price.*, priceDef.*, t.*
FROM [Uvendia].Product P				
	inner join TEMPTABLE temp on p.Id = temp.Id
	left join [Uvendia].[ProductToPrice] ptp on p.[Id] = ptp.[ProductId]
    left join [Uvendia].[Price] price on ptp.[PriceId] = price.[Id]
    left join [Uvendia].[PriceDefinition] priceDef on price.[PriceDefinitionId] = priceDef.[Id]
    left join [Uvendia].[Definition] d on p.[DefinitionId] = d.[Id]
    left join [Uvendia].[Property] prop on d.[Id] = prop.[DefinitionId]  
    left join [Uvendia].[PropertyValue] pv on prop.[Id] = pv.[PropertyId] and p.[Id] = pv.[ItemId] and pv.Section = 'Product'
	left join [Uvendia].[ProductToTranslation] ptt on p.[Id] = ptt.[ProductId]
	left join [Uvendia].[Translation] t on ptt.[TranslationId] = t.[Id]

--ORDER BY p.PublishedOn DESC

RETURN
GO
PRINT N'Creating [Uvendia].[GetRandomProducts]...';


GO
CREATE PROCEDURE [Uvendia].[GetRandomProducts]
	@take int = 3,
	@published bit = null
AS

WITH TEMPTABLE AS 
(
	SELECT TOP(@take)
		p.Id
	FROM [Uvendia].Product P	
	WHERE (@published is null or P.Published = @published) AND (P.VariantSku IS NULL)
	ORDER BY NEWID()
)

SELECT 
	p.*, d.*, prop.*, pv.*, price.*, priceDef.*, t.*
FROM [Uvendia].Product P				
	inner join TEMPTABLE temp on p.Id = temp.Id
	left join [Uvendia].[ProductToPrice] ptp on p.[Id] = ptp.[ProductId]
    left join [Uvendia].[Price] price on ptp.[PriceId] = price.[Id]
    left join [Uvendia].[PriceDefinition] priceDef on price.[PriceDefinitionId] = priceDef.[Id]
    left join [Uvendia].[Definition] d on p.[DefinitionId] = d.[Id]
    left join [Uvendia].[Property] prop on d.[Id] = prop.[DefinitionId]  
    left join [Uvendia].[PropertyValue] pv on prop.[Id] = pv.[PropertyId] and p.[Id] = pv.[ItemId] and pv.Section = 'Product'
	left join [Uvendia].[ProductToTranslation] ptt on p.[Id] = ptt.[ProductId]
	left join [Uvendia].[Translation] t on ptt.[TranslationId] = t.[Id]


RETURN
GO
PRINT N'Creating [Uvendia].[GetReviewedProducts]...';


GO
CREATE PROCEDURE [Uvendia].[GetReviewedProducts]
	@take int = 3,
	@published bit = null
AS

WITH TEMPTABLE AS 
(
	SELECT TOP(@take) p.Id, R.Stars
		FROM [Uvendia].Product P
		INNER JOIN [Uvendia].[Review] R on R.ItemId = P.ID
	WHERE (@published is null or P.Published = @published) AND (P.VariantSku IS NULL)
	ORDER BY R.Stars DESC
)
SELECT
	p.*, d.*, prop.*, pv.*, price.*, priceDef.*, temp.Stars, t.*
FROM [Uvendia].Product P		
	INNER JOIN TEMPTABLE temp on p.Id = temp.Id
	left join [Uvendia].[ProductToPrice] ptp on p.[Id] = ptp.[ProductId]
    left join [Uvendia].[Price] price on ptp.[PriceId] = price.[Id]
    left join [Uvendia].[PriceDefinition] priceDef on price.[PriceDefinitionId] = priceDef.[Id]
    left join [Uvendia].[Definition] d on p.[DefinitionId] = d.[Id]
    left join [Uvendia].[Property] prop on d.[Id] = prop.[DefinitionId]  
    left join [Uvendia].[PropertyValue] pv on prop.[Id] = pv.[PropertyId] and p.[Id] = pv.[ItemId] and pv.Section = 'Product'
	left join [Uvendia].[ProductToTranslation] ptt on p.[Id] = ptt.[ProductId]
	left join [Uvendia].[Translation] t on ptt.[TranslationId] = t.[Id]


RETURN
GO
/*
Post-Deployment Script Template              
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.    
 Use SQLCMD syntax to include a file in the post-deployment script.      
 Example:      :r .\myfile.sql                
 Use SQLCMD syntax to reference a variable in the post-deployment script.    
 Example:      :setvar TableName MyTable              
               SELECT * FROM [$(TableName)]          
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT 1 FROM sys.fulltext_catalogs WHERE [name] = 'UvendiaWebshopCatalog')	
BEGIN
	CREATE FULLTEXT CATALOG UvendiaWebshopCatalog AS DEFAULT;  
END

IF ((SELECT COLUMNPROPERTY(OBJECT_ID('[Uvendia].[Product]'), 'Sku', 'IsFulltextIndexed')) <> 1) 
BEGIN	
	CREATE FULLTEXT INDEX ON [Uvendia].[Product](Sku, VariantSku, Name, Tags) KEY INDEX PK_Product WITH CHANGE_TRACKING AUTO;  
END

IF ((SELECT COLUMNPROPERTY(OBJECT_ID('[Uvendia].[Translation]'), 'DisplayName', 'IsFulltextIndexed')) <> 1) 
BEGIN	
	CREATE FULLTEXT INDEX ON [Uvendia].[Translation](DisplayName, ShortDescription, LongDescription) KEY INDEX PK_Translation WITH CHANGE_TRACKING AUTO;  
END
GO

IF ((SELECT COLUMNPROPERTY(OBJECT_ID('[Uvendia].[PropertyValue]'), 'Value', 'IsFulltextIndexed')) <> 1) 
BEGIN	
	CREATE FULLTEXT INDEX ON [Uvendia].[PropertyValue]([Value]) KEY INDEX PK_PropertyValue WITH CHANGE_TRACKING AUTO;  
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [Uvendia].[ProductToTranslation] WITH CHECK CHECK CONSTRAINT [FK_ProductToTranslation_Product];

ALTER TABLE [Uvendia].[ProductToTranslation] WITH CHECK CHECK CONSTRAINT [FK_ProductToTranslation_Translation];

ALTER TABLE [Uvendia].[CategoryToTranslation] WITH CHECK CHECK CONSTRAINT [FK_CategoryToTranslation_Category];

ALTER TABLE [Uvendia].[CategoryToTranslation] WITH CHECK CHECK CONSTRAINT [FK_CategoryToTranslation_Translation];

ALTER TABLE [Uvendia].[Definition] WITH CHECK CHECK CONSTRAINT [FK_Definition_ParentDef];

ALTER TABLE [Uvendia].[Cart] WITH CHECK CHECK CONSTRAINT [FK_Cart_Reference_Product_ID];

ALTER TABLE [Uvendia].[Cart] WITH CHECK CHECK CONSTRAINT [FK_Cart_Reference_TicketSale_ID];

ALTER TABLE [Uvendia].[Cart] WITH CHECK CHECK CONSTRAINT [FK_Cart_Reference_Price_ID];

ALTER TABLE [Uvendia].[TicketOrderDetail] WITH CHECK CHECK CONSTRAINT [FK_TicketOrderDetail_Reference_Order];

ALTER TABLE [Uvendia].[TicketOrderDetail] WITH CHECK CHECK CONSTRAINT [FK_TicketOrderDetail_Reference_TicketSale];

ALTER TABLE [Uvendia].[TicketSale] WITH CHECK CHECK CONSTRAINT [FK_TicketSale_Event];

ALTER TABLE [Uvendia].[TicketSale] WITH CHECK CHECK CONSTRAINT [FK_TicketSale_Reference_Price];

ALTER TABLE [Uvendia].[ProductToCategory] WITH CHECK CHECK CONSTRAINT [FK_ProductToCategory_Product];

ALTER TABLE [Uvendia].[ProductToCategory] WITH CHECK CHECK CONSTRAINT [FK_ProductToCategory_ProductCategory];

ALTER TABLE [Uvendia].[Category] WITH CHECK CHECK CONSTRAINT [FK_ParentCategory_Reference_ProductCategory_ID];

ALTER TABLE [Uvendia].[Category] WITH CHECK CHECK CONSTRAINT [FK_Category_Reference_Store_ID];

ALTER TABLE [Uvendia].[Category] WITH CHECK CHECK CONSTRAINT [FK_Category_Reference_Definintion_ID];

ALTER TABLE [Uvendia].[Property] WITH CHECK CHECK CONSTRAINT [FK_Property_Definition];

ALTER TABLE [Uvendia].[ProductOrderDetail] WITH CHECK CHECK CONSTRAINT [FK_ProductOrderDetail_Reference_Order];

ALTER TABLE [Uvendia].[ProductOrderDetail] WITH CHECK CHECK CONSTRAINT [FK_ProductOrderDetail_Reference_Product];

ALTER TABLE [Uvendia].[ProductOrderDetail] WITH CHECK CHECK CONSTRAINT [FK_ProductOrderDetail_Reference_Price];

ALTER TABLE [Uvendia].[Order] WITH CHECK CHECK CONSTRAINT [FK_Order_Reference_Address_Invoice];

ALTER TABLE [Uvendia].[Order] WITH CHECK CHECK CONSTRAINT [FK_Order_Reference_Address_Ship];

ALTER TABLE [Uvendia].[Order] WITH CHECK CHECK CONSTRAINT [FK_Order_Reference_PaymentMethod];

ALTER TABLE [Uvendia].[Order] WITH CHECK CHECK CONSTRAINT [FK_Order_Reference_ShippingMethod];

ALTER TABLE [Uvendia].[Product] WITH CHECK CHECK CONSTRAINT [FK_Product_Reference_Definintion_ID];

ALTER TABLE [Uvendia].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_Address];

ALTER TABLE [Uvendia].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_Reference_Definintion_ID];

ALTER TABLE [Uvendia].[EventToPrice] WITH CHECK CHECK CONSTRAINT [FK_EventToPrice_Event];

ALTER TABLE [Uvendia].[EventToPrice] WITH CHECK CHECK CONSTRAINT [FK_EventToPrice_Price];

ALTER TABLE [Uvendia].[Inventory] WITH CHECK CHECK CONSTRAINT [FK_Inventory_Reference_Product_Id];

ALTER TABLE [Uvendia].[EventToTranslation] WITH CHECK CHECK CONSTRAINT [FK_EventToTranslation_Product];

ALTER TABLE [Uvendia].[EventToTranslation] WITH CHECK CHECK CONSTRAINT [FK_EventToTranslation_Translation];

ALTER TABLE [Uvendia].[ShippingMethodToPrice] WITH CHECK CHECK CONSTRAINT [FK_ShippingMethodToPrice_ShippingMethod];

ALTER TABLE [Uvendia].[ShippingMethodToPrice] WITH CHECK CHECK CONSTRAINT [FK_ShippingMethodToPrice_Price];

ALTER TABLE [Uvendia].[ProductToPrice] WITH CHECK CHECK CONSTRAINT [FK_ProductToPrice_Product];

ALTER TABLE [Uvendia].[ProductToPrice] WITH CHECK CHECK CONSTRAINT [FK_ProductToPrice_Price];

ALTER TABLE [Uvendia].[PaymentMethodToPrice] WITH CHECK CHECK CONSTRAINT [FK_PaymentMethodToPrice_Payment];

ALTER TABLE [Uvendia].[PaymentMethodToPrice] WITH CHECK CHECK CONSTRAINT [FK_PaymentMethodToPrice_Price];

ALTER TABLE [Uvendia].[Price] WITH CHECK CHECK CONSTRAINT [FK_ProductPrice_PriceDefinition];

ALTER TABLE [Uvendia].[StoreToTranslation] WITH CHECK CHECK CONSTRAINT [FK_StoreToTranslation_Store];

ALTER TABLE [Uvendia].[StoreToTranslation] WITH CHECK CHECK CONSTRAINT [FK_StoreToTranslation_Translation];

ALTER TABLE [Uvendia].[Store] WITH CHECK CHECK CONSTRAINT [FK_Store_Reference_Definintion_ID];

ALTER TABLE [Uvendia].[PropertyValue] WITH CHECK CHECK CONSTRAINT [FK_PropertyValue_Property];


GO
PRINT N'Update complete.';


GO
