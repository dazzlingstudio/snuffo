@model Uvendia.Domain.Mvc.ViewModels.Settings.OrderEmailTemplateSettingModel
@using Uvendia.Domain.Settings
@{

}
@Html.ValidationSummary(false, "", new { @class = "text-danger" })
<div id="tabs">
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#tabs-content">Content</a></li>
        @foreach (var lang in Model.Languages)
        {
            <li><a data-toggle="tab" href="#tabs-@(lang.CultureName)">@lang.NativeName</a></li>
        }
    </ul>
    @using (Html.BeginForm("OrderEmailTemplate", "Settings", FormMethod.Post, htmlAttributes: new { id = "frmOrderEmailTemplate", @class = "form-group" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.OrderEmailTemplateSetting.Id)
        @Html.HiddenFor(model => model.OrderEmailTemplateSetting.CreatedOn)
        @Html.HiddenFor(model => model.OrderEmailTemplateSetting.CreatedBy)
        @Html.HiddenFor(model => model.OrderEmailTemplateSetting.ModifiedBy)
        @Html.HiddenFor(model => model.TreeSelectedNodePath)

        <div id="tabs-content" style="display:none;">

            <div class="row">
                @Html.LabelFor(model => model.OrderEmailTemplateSetting.LogoId, htmlAttributes: new { @class = "control-label" })
                @Html.Raw(Model.Logo.RenderControl())
            </div>
            <br />
            <br />
            <div class="row">
                @Html.LabelFor(model => model.OrderEmailTemplateSetting.TemplateName, htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.EditorFor(model => model.OrderEmailTemplateSetting.TemplateName, new { htmlAttributes = new { @class = "form-control input-sm required" } })
            </div>

            <div class="row">
                @Html.LabelFor(model => model.OrderEmailTemplateSetting.HasTickets, htmlAttributes: new { @class = "control-label col-md-2" })
                <label class="switch">
                    @Html.CheckBoxFor(model => model.OrderEmailTemplateSetting.HasTickets, new { @class = "checkbox-middle" })
                    <span class="slider round"></span>
                </label>
            </div>
            
            <div class="row">
                @Html.LabelFor(model => model.OrderEmailTemplateSetting.HasInvoice, htmlAttributes: new { @class = "control-label col-md-2" })
                <label class="switch">
                    @Html.CheckBoxFor(model => model.OrderEmailTemplateSetting.HasInvoice, new { @class = "checkbox-middle" })
                    <span class="slider round"></span>
                </label>
            </div>

        </div>

        for (int i = 0; i < Model.OrderEmailTemplateSetting.Details.Count(); i++)
        {
        <div id="tabs-@Model.Languages[i].CultureName" style="display:none;">
            @Html.HiddenFor(model => model.OrderEmailTemplateSetting.Details[i].LanguageCultureName)

            <div class="row">
                @Html.LabelFor(model => model.OrderEmailTemplateSetting.Details[i].EmailTemplatePath, htmlAttributes: new { @class = "control-label col-md-4" })
                @Html.EditorFor(model => model.OrderEmailTemplateSetting.Details[i].EmailTemplatePath, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "~/views/mail/templatename.cshtml", autocomplete = "off" } })
            </div>

            <div class="row">
                @Html.LabelFor(model => model.OrderEmailTemplateSetting.Details[i].EmailAssemblyTypeName, htmlAttributes: new { @class = "control-label col-md-12" })
                @Html.EditorFor(model => model.OrderEmailTemplateSetting.Details[i].EmailAssemblyTypeName, new { htmlAttributes = new { @class = "form-control input-sm", placeholder = "MyCompany.MyApp.MyDomain.MyClass, DllName", autocomplete = "off" } })

                <pre class="help-block"><i class="glyphicon glyphicon-info-sign"></i> Make sure your class inherit from the interface <i>ICustomOrderEmailTransfer</i></pre>
            </div>

        </div>
        }
        
        <div class="form-group">
            <div class="btn-toolbar">
                @Html.CreateAuthorizedActionButton("Save", ActionType.Save, new Dictionary<string, string> { { "type", "submit" }, { "class", "btn btn-success pull-left action-link" } })
            </div>
        </div>
    }
</div>
@section scripts{
    <script>
        $(function () {
            $("#tabs").tabs();
        });
        UmbClientMgr.mainTree().syncTree($('#TreeSelectedNodePath').val(), true);

    </script>
}